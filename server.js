const express = require('express');
const app = express();
const port = 3001;
const bodyParser = require("body-parser");
const swaggerJsdoc = require("swagger-jsdoc");
const swaggerUI = require("swagger-ui-express");
const cors = require("cors");
const {check, validationResult} = require('express-validator');
const axios = require('axios');


const options = {
  swaggerDefinition: {
    info: {
      title: 'Test Company API',
      version: '1.0.0',
      description: 'Test Company Express API with autogenerated swagger doc',
    },
	host:'137.184.132.135:3001',
	basePath: '/',
  },
  apis: ['./server.js'],
};

const specs = swaggerJsdoc(options);
app.use('/docs', swaggerUI.serve, swaggerUI.setup(specs));
app.use(cors());

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:false}));


const mariadb = require('mariadb');
const pool = mariadb.createPool({
	host: 'localhost',
	user: 'root',
	password: 'root',
	database: 'sample',
	port: 3306,
	connectionLimit: 5
});

/**
 * @swagger
 * /agents:
 *    get:
 *      description: Returns all agents
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Agents array with code, name, working area, commision, phone number, and country
 */
app.get('/agents', async (req, res) => {

try{
const result = await pool.query("Select * from agents");
res.json(result);
}
catch(err){
throw err;
}
});

/**
 * @swagger
 * /company:
 *    get:
 *      description: Returns all companies with id 19
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: company objects
 */
app.get('/company', async (req,res) =>{
try{
const result = await pool.query("SELECT * FROM company WHERE COMPANY_ID=19");
res.json(result);
}
catch(err){
throw err;
}
});

 /**
 * @swagger
 * /customer:
 *    get:
 *      description: Returns all customer names when customer city is london
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: customer objects
 */
app.get('/customer', async (req, res) =>{
try{
const result = await pool.query("SELECT CUST_NAME FROM customer WHERE CUST_CITY = 'London'");
res.json(result);
}
catch(err){
throw err;
}
});

/**
 * @swagger
 * /daysorder:
 *    get:
 *      description: Returns all order numbers, amounts, advance amounts, and order dates
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: days order objects
 */
app.get('/daysorder', async (req, res) =>{
try{
const result = await pool.query("SELECT ORD_NUM, ORD_AMOUNT, ADVANCE_AMOUNT, ORD_DATE from daysorder");
res.json(result);
}
catch(err){
throw err;
}
});

 /**
 * @swagger
 * /despatch:
 *    get:
 *      description: Returns all despatch
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: despatch objects
 */
app.get('/despatch', async (req, res) =>{
try{
const result = await pool.query("SELECT * FROM despatch");
res.json(result);
}
catch(err){
throw err;
}
});

/**
 * @swagger
 * /foods:
 *    get:
 *      description: Returns all item names and units from foods with item id of 1 
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: food objects
 */
app.get('/foods', async (req, res) =>{
try{
const result = await pool.query("SELECT ITEM_NAME, ITEM_UNIT FROM foods WHERE ITEM_ID=1");
res.json(result);
}
catch(err){
throw err;
}
});

 /**
 * @swagger
 * /listofitem:
 *    get:
 *      description: Returns all list of items
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: list of item objects
 */
app.get('/listofitem', async (req, res) =>{
try{
const result = await pool.query("SELECT * FROM listofitem");
res.json(result);
}
catch(err){
throw err;
}});

/**
 * @swagger
 * /orders:
 *    get:
 *      description: Returns all order amounts and order dates from orders
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: order objects
 */
app.get('/orders', async (req, res) =>{
try{
const result = await pool.query("SELECT ORD_AMOUNT, ORD_DATE FROM orders");
res.json(result);
}
catch(err){
throw err;
}});

/**
 * @swagger
 * /student:
 *    get:
 *      description: Returns all student names where their section is a
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: student name objects
 */
app.get('/student', async (req, res) =>{
try{
const result = await pool.query("SELECT NAME FROM student WHERE Section ='a'");
res.json(result);
}
catch(err){
throw err;
}});

 /**
 * @swagger
 * /studentreport:
 *    get:
 *      description: Returns all classes and grades from student reports
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: student report objects
 */
app.get('/studentreport', async (req, res) =>{
try{
const result = await pool.query("SELECT Class, grade FROM studentreport");
res.json(result);
}
catch(err){
throw err;
}});

//make a post request (adding something new)
/**
 * @swagger
 * definitions:
 *   Food:
 *     properties:
 *       ITEM_ID:
 *         type: string
 *       ITEM_NAME:
 *         type: string
 *       ITEM_UNIT:
 *         type: string
 *       COMPANY_ID:
 *         type: string
 */
/**
 * @swagger
 * /food:
 *    post:
 *      description: Add a record to the food table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Added data to the food table
 *      parameters:
 *          - name: Food
 *            description: the food object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Food'
 *
 */
app.post('/food',
   [ check('ITEM_ID','Item ID is required').not().isEmpty().trim(),     check('ITEM_NAME').trim(),     check('ITEM_UNIT').trim(),       check('COMPANY_ID').trim()       ]
    ,async (req,res)=>{
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).send(errors);
    }
    let conn;
    console.log(req.body)
    const {ITEM_ID,ITEM_NAME,ITEM_UNIT,COMPANY_ID}=req.body

    try{
        conn= await pool.getConnection();

        const result= await pool.query(`INSERT INTO foods (ITEM_ID, ITEM_NAME, ITEM_UNIT, COMPANY_ID) VALUES ('${ITEM_ID}', '${ITEM_NAME}', '${ITEM_UNIT}','${COMPANY_ID}')`);
        console.log(result)
      res.status(200).send('Record Inserted Successfully');
    }
catch(error) {
         console.error(error.message)
        res.status(500).send('Server Error');
    }
finally{
    if (conn) return conn.end();
}

});





//make a patch request (partially updating something existing?)
/**
 * @swagger
 * /food/{id}:
 *    patch:
 *      description: Update a record from food table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Updated data fromfood table
 *          404:
 *              description: No record for given id
 *      parameters:
 *          - name: id
 *            in: path
 *            required: true
 *            type: string
 *          - name: Food
 *            description: food object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Food'
 *
 */
app.patch('/food/:id',
    async (req,res)=>{
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).send(errors);
    }
    let conn;
    const id = req.params.id
    const {ITEM_NAME,ITEM_UNIT,COMPANY_ID}=req.body
    let rows=0
    try{
        conn= await pool.getConnection();
	if (ITEM_NAME && ITEM_UNIT && COMPANY_ID){
        	const result= await pool.query(`UPDATE foods SET ITEM_NAME='${ITEM_NAME}', ITEM_UNIT='${ITEM_UNIT}' , COMPANY_ID='${COMPANY_ID}' 
            WHERE ITEM_ID = '${id}'`)
		rows = result.affectedRows
	}
    else if (ITEM_NAME && ITEM_UNIT ){
        	const result= await pool.query(`UPDATE foods SET ITEM_NAME='${ITEM_NAME}', ITEM_UNIT='${ITEM_UNIT}'  
            WHERE ITEM_ID = '${id}'`)
		rows = result.affectedRows
	}
   else if (ITEM_NAME &&  COMPANY_ID){
        	const result= await pool.query(`UPDATE foods SET ITEM_NAME='${ITEM_NAME}',  COMPANY_ID='${COMPANY_ID}' 
            WHERE ITEM_ID = '${id}'`)
		rows = result.affectedRows
	}
    else if ( ITEM_UNIT && COMPANY_ID){
        	const result= await pool.query(`UPDATE foods SET ITEM_UNIT='${ITEM_UNIT}' , COMPANY_ID='${COMPANY_ID}' 
            WHERE ITEM_ID = '${id}'`)
		rows = result.affectedRows
	}
    else if (ITEM_NAME){
        	const result= await pool.query(`UPDATE foods SET ITEM_NAME='${ITEM_NAME}'
            WHERE ITEM_ID = '${id}'`)
		rows = result.affectedRows
	}
    else if ( ITEM_UNIT){
        	const result= await pool.query(`UPDATE foods SET ITEM_UNIT='${ITEM_UNIT}' 
            WHERE ITEM_ID = '${id}'`)
		rows = result.affectedRows
	}
    else if (COMPANY_ID){
        	const result= await pool.query(`UPDATE foods SET COMPANY_ID='${COMPANY_ID}' 
            WHERE ITEM_ID = '${id}'`)
		rows = result.affectedRows
	}

	
	if(rows==0) {
        	return res.status(404).send('Record not Found');
        }
	return res.status(200).send("Updated Successfully");
	}
catch(error) {
	res.status(500).send('Server Error');
    }
finally{
    if (conn) return conn.end();
}
});





//make a put request (updating something existing)
/**
 * @swagger
 * /food/{id}:
 *    put:
 *      description: update record in food table, create new if not one to edit
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Added data to company table
 *      parameters:
 *          - name: id
 *            in: path
 *            required: true
 *            type: string
 *          - name: Food
 *            description: food object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Food'
 *
 */


 app.put('/food/:id', 
	[ check('ITEM_NAME').not().isEmpty().trim(),
		  check('ITEM_UNIT').not().isEmpty().trim(),
      check('COMPANY_ID').not().isEmpty().trim()
      ],
	async (req,res)=>{
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).send(errors);
    }
    let conn;
    const id = req.params.id   
    console.log(req.params.id)
    const {ITEM_NAME,ITEM_UNIT,COMPANY_ID}=req.body
 
    try{
        conn= await pool.getConnection();
	const result= await pool.query(`UPDATE foods SET ITEM_NAME='${ITEM_NAME}', ITEM_UNIT='${ITEM_UNIT}', COMPANY_ID='${COMPANY_ID}' WHERE ITEM_ID = '${id}'`)
	if (result.affectedRows==0){
	    const result= await pool.query(`INSERT INTO foods (ITEM_ID, ITEM_NAME, ITEM_UNIT,COMPANY_ID) VALUES ('${id}', '${ITEM_NAME}', '${ITEM_UNIT}', '${COMPANY_ID}')`)
	}
    res.status(200).send('Record Updated Successfully');
}
catch(error) {
         console.error(error.message)
        res.status(500).send('Server Error');
    }
finally{
    if (conn) return conn.end();
}

});
 
//make a delete request
/**
 * @swagger
 * /food/{id}:
 *    delete:
 *      description: Delete the record in the food table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Successfully deleted record from table
 *      parameters:
 *          - name: id
 *            in: path
 *            required: true
 *            type: string
 *
 */
app.delete('/food/:id', async (req,res)=>{
    let conn;
    const id = req.params.id
    try{
        conn= await pool.getConnection();
	const result= await pool.query(`DELETE FROM foods WHERE ITEM_ID='${id}'`);
	if(result.affectedRows==0) {
		return res.status(404).send('Record not Found');
	}
	return res.status(404).send('Deleted Record Successfully!');
	}
   catch(error) {
         console.error(error.message)
        res.status(500).send('Server Error');
    }
finally{
    if (conn) return conn.end();
}
});

                                                                                                                                                 
app.get('/say', function(req,res) {                                                                                                              
       // resp = "Hello World" + req.query.keyword ;                                                                                               
        axios.get('https://a8vdvsg7ca.execute-api.us-east-2.amazonaws.com/default/my-function?keyword='+req.query.keyword)                       
.then(response =>{                                                                                                                               
                res.statusCode = response.data.statusCode;                                                                                       
                res.send(response.data.body);                                                                                                    
        })                                                                                                                                       
        .catch(err=>{                                                                                                                            
                res.statusCode = 400;                                                                                                            
                res.send(err);                                                                                                                   
        });                                                                                                                                      
});                                                                                                                                              
                                                                                                                                                 


app.listen(port, () => {
console.log(`Example app listening at http://localhost:${port}`)
});
